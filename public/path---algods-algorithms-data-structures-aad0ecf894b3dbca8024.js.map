{"version":3,"sources":["webpack:///path---algods-algorithms-data-structures-aad0ecf894b3dbca8024.js","webpack:///./.cache/json/algods-algorithms-data-structures.json"],"names":["webpackJsonp","377","module","exports","data","markdownRemark","html","timeToRead","excerpt","frontmatter","title","cover","date","category","tags","fields","slug","pathContext","path"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,gBAAkBC,KAAA,2nOAAk7NC,WAAA,EAAAC,QAAA,gJAAAC,aAAmoBC,MAAA,+BAAAC,MAAA,wBAAAC,KAAA,aAAAC,SAAA,SAAAC,MAAA,gCAAsJC,QAAWC,KAAA,iCAAuCC,aAAgBD,KAAA,8BAAAE,KAAA","file":"path---algods-algorithms-data-structures-aad0ecf894b3dbca8024.js","sourcesContent":["webpackJsonp([44063592670729],{\n\n/***/ 377:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<p>The goal of studying these fundamentals is to write code that utilizes the right data structure with an acceptable time and space complexity.</p>\\n<h2 id=\\\"data-structures\\\"><a href=\\\"#data-structures\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Data Structures</h2>\\n<p>Choosing the right data structure makes your code intuitive.  Being able to recognize when to use a hash map, an array, or a graph can be important in solving a problem.  Let's look a scheduling coding exercise that I recently helped someone try to solve.  Given an array of the start times and the duration of each appointments, structure the requests to maximize the number of hours worked in a day.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">const</span> requests <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span>\\n  <span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">'10:00am'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'30'</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">'10:15am'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'45'</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">'10:30am'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'20'</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">'11:00am'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'40'</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token comment\\\">// And more</span>\\n<span class=\\\"token punctuation\\\">]</span>\\n</code></pre>\\n      </div>\\n<p>The first thing I did is convert the data into integers of the start time and the end time, in terms of minutes per day.  For example, 12:00am would be <code>0</code> and 11:59pm would be <code>1439</code> (there are 1440 minutes in a day):</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">const</span> requests <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span>\\n  <span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">600</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">630</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">615</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">660</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">630</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">650</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">660</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">700</span><span class=\\\"token punctuation\\\">]</span>\\n<span class=\\\"token punctuation\\\">]</span>\\n</code></pre>\\n      </div>\\n<p>I recognized that it can be transformed into a graph problem, so I created a node:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">Node</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">constructor</span><span class=\\\"token punctuation\\\">(</span>startTime<span class=\\\"token punctuation\\\">,</span> endTime<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>startTime <span class=\\\"token operator\\\">=</span> startTime<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>startTime <span class=\\\"token operator\\\">=</span> endTime<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>duration <span class=\\\"token operator\\\">=</span> endTime <span class=\\\"token operator\\\">-</span> startTime<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>parents <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>children <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>I ran it through an algorithm that connect all the nodes, and this was the result:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">const</span> nodes <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span>\\n  <span class=\\\"token punctuation\\\">{</span>\\n    startTime<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">600</span><span class=\\\"token punctuation\\\">,</span>\\n    endTime<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">630</span><span class=\\\"token punctuation\\\">,</span>\\n    duration<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">30</span><span class=\\\"token punctuation\\\">,</span>\\n    parents<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span>\\n    children<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">[</span>\\n      <span class=\\\"token comment\\\">// Reference to [630, 650] node,</span>\\n      <span class=\\\"token comment\\\">// Reference to [660, 700] node</span>\\n    <span class=\\\"token punctuation\\\">]</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">]</span>\\n</code></pre>\\n      </div>\\n<p>The 10:30am and 11:00am nodes are both children of the 10:00am node, because they do not overlap when the 10:00am node ends at 10:30am.  The 10:00am node does not have any parents because they is no appointment before that.</p>\\n<p>Voila!  Now it is just a simple graph problem.</p>\\n<p>The algorithm is the mind and the data structure is the body of computer science.</p>\",\"timeToRead\":1,\"excerpt\":\"The goal of studying these fundamentals is to write code that utilizes the right data structure with an acceptable time and space complexityâ€¦\",\"frontmatter\":{\"title\":\"Algorithms & Data Structures\",\"cover\":\"/covers/algorithm.png\",\"date\":\"2017-12-30\",\"category\":\"algods\",\"tags\":[\"algorithm\",\"data structures\"]},\"fields\":{\"slug\":\"/algorithms-data-structures\"}}},\"pathContext\":{\"slug\":\"/algorithms-data-structures\",\"path\":\"/algods/algorithms-data-structures\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---algods-algorithms-data-structures-aad0ecf894b3dbca8024.js","module.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<p>The goal of studying these fundamentals is to write code that utilizes the right data structure with an acceptable time and space complexity.</p>\\n<h2 id=\\\"data-structures\\\"><a href=\\\"#data-structures\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Data Structures</h2>\\n<p>Choosing the right data structure makes your code intuitive.  Being able to recognize when to use a hash map, an array, or a graph can be important in solving a problem.  Let's look a scheduling coding exercise that I recently helped someone try to solve.  Given an array of the start times and the duration of each appointments, structure the requests to maximize the number of hours worked in a day.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">const</span> requests <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span>\\n  <span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">'10:00am'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'30'</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">'10:15am'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'45'</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">'10:30am'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'20'</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">'11:00am'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'40'</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token comment\\\">// And more</span>\\n<span class=\\\"token punctuation\\\">]</span>\\n</code></pre>\\n      </div>\\n<p>The first thing I did is convert the data into integers of the start time and the end time, in terms of minutes per day.  For example, 12:00am would be <code>0</code> and 11:59pm would be <code>1439</code> (there are 1440 minutes in a day):</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">const</span> requests <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span>\\n  <span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">600</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">630</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">615</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">660</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">630</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">650</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">660</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">700</span><span class=\\\"token punctuation\\\">]</span>\\n<span class=\\\"token punctuation\\\">]</span>\\n</code></pre>\\n      </div>\\n<p>I recognized that it can be transformed into a graph problem, so I created a node:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">Node</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">constructor</span><span class=\\\"token punctuation\\\">(</span>startTime<span class=\\\"token punctuation\\\">,</span> endTime<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>startTime <span class=\\\"token operator\\\">=</span> startTime<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>startTime <span class=\\\"token operator\\\">=</span> endTime<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>duration <span class=\\\"token operator\\\">=</span> endTime <span class=\\\"token operator\\\">-</span> startTime<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>parents <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>children <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>I ran it through an algorithm that connect all the nodes, and this was the result:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">const</span> nodes <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span>\\n  <span class=\\\"token punctuation\\\">{</span>\\n    startTime<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">600</span><span class=\\\"token punctuation\\\">,</span>\\n    endTime<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">630</span><span class=\\\"token punctuation\\\">,</span>\\n    duration<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">30</span><span class=\\\"token punctuation\\\">,</span>\\n    parents<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span>\\n    children<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">[</span>\\n      <span class=\\\"token comment\\\">// Reference to [630, 650] node,</span>\\n      <span class=\\\"token comment\\\">// Reference to [660, 700] node</span>\\n    <span class=\\\"token punctuation\\\">]</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">]</span>\\n</code></pre>\\n      </div>\\n<p>The 10:30am and 11:00am nodes are both children of the 10:00am node, because they do not overlap when the 10:00am node ends at 10:30am.  The 10:00am node does not have any parents because they is no appointment before that.</p>\\n<p>Voila!  Now it is just a simple graph problem.</p>\\n<p>The algorithm is the mind and the data structure is the body of computer science.</p>\",\"timeToRead\":1,\"excerpt\":\"The goal of studying these fundamentals is to write code that utilizes the right data structure with an acceptable time and space complexityâ€¦\",\"frontmatter\":{\"title\":\"Algorithms & Data Structures\",\"cover\":\"/covers/algorithm.png\",\"date\":\"2017-12-30\",\"category\":\"algods\",\"tags\":[\"algorithm\",\"data structures\"]},\"fields\":{\"slug\":\"/algorithms-data-structures\"}}},\"pathContext\":{\"slug\":\"/algorithms-data-structures\",\"path\":\"/algods/algorithms-data-structures\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/algods-algorithms-data-structures.json\n// module id = 377\n// module chunks = 44063592670729"],"sourceRoot":""}